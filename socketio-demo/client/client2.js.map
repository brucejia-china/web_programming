{"version":3,"file":"client2.js","sourceRoot":"","sources":["client2.ts"],"names":[],"mappings":"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","sourcesContent":["import { io } from 'socket.io-client';\r\n\r\nexport class Socket {\r\n    private m_timer: number;\r\n    private m_socket;\r\n    private m_query = {\r\n        connectionTimes: 0\r\n    };\r\n    private m_onClose = async () => {\r\n        // we don't care what the server returns\r\n        await fetch(\"/api/net/socket/\" + this.id, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n    }\r\n\r\n    constructor() {\r\n    }\r\n\r\n    open(): void {\r\n        this.m_socket = io({\r\n            transports: ['websocket', 'polling'],\r\n            upgrade: true,\r\n            reconnection: true,\r\n            autoConnect: false,\r\n            query: this.m_query\r\n        });\r\n        this.m_socket.on('connect', () => {\r\n            if (this.m_query['socketId'] === undefined) {\r\n                // first time to connect websocket server\r\n                this.m_query['socketId'] = this.m_socket.id;\r\n                window.addEventListener('beforeunload', this.m_onClose);\r\n            }\r\n\r\n            if (this.m_timer !== undefined) {\r\n                clearTimeout(this.m_timer);\r\n                this.m_timer = undefined;\r\n            }\r\n   \r\n            this.m_query.connectionTimes++;\r\n            this.onOpen();\r\n        });\r\n        this.m_socket.on(\"disconnect\", (reason) => {\r\n            if (reason === 'transport close' ||\r\n                reason === 'ping timeout') {\r\n                this.m_timer = setTimeout(() => {\r\n                    this.m_timer = undefined;\r\n                    this.m_query.connectionTimes = 0;\r\n                    delete this.m_query['socketId'];\r\n                    this.doClose();\r\n                }, 10 * 60 * 1000);\r\n            }\r\n        });\r\n\r\n        this.m_socket.on('message', (message: Object) => {\r\n            this.onMessage(message);\r\n        });\r\n        this.m_socket.on('event', (event: Object) => {\r\n            this.onEvent(event);\r\n        });\r\n        this.m_socket.connect();\r\n    }\r\n\r\n    close(): void {\r\n        this.doClose();\r\n    }\r\n\r\n    private doClose() {\r\n        this.m_socket.disconnect();\r\n        window.removeEventListener('beforeunload', this.m_onClose);            \r\n        this.m_socket = undefined;\r\n    }\r\n\r\n    get connected(): boolean {\r\n        return this.m_socket.connected;\r\n    }\r\n\r\n    get id(): string {\r\n        return this.m_socket.id;\r\n    }\r\n\r\n    onOpen(): void {\r\n\r\n    }\r\n\r\n    onClose(): void {\r\n\r\n    }\r\n\r\n    onMessage(message: Object): void {\r\n\r\n    }\r\n\r\n    onEvent(event: Object): void {\r\n\r\n    }\r\n}\r\n\r\nconst client = new Socket();\r\nclient.open();\r\n"]}